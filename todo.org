#+TITLE: TODO list for topologyd
#+TODO: TODO(t) PROJ(p) LOOP(r) STRT(s) WAIT(w) HOLD(h) IDEA(i) | DONE(d) KILL(k) [ ](T) [-](S) [?](W) | [X](D) | OKAY(o) YES(y) NO(n)

* TODO Authentication
We probably will just use IPSec because we need/want it elsewhere anyway
* DONE Is a simple HTTP REST service otherwise sufficient as a wire protocol?
It probably is, but it might also make sense to think about it and use the same
protocol as the rest of the stack, such as ZeroMQ/protobuf, should we decide to
use it.
* NO Create go bindings to liblldpctl rather than calling the commandline tool?
Seems like pointless overkill that doesn't add much value
* TODO How to handle network failures? Timeouts?
#+begin_example
2022/10/27 11:23:58 Error querying http://172.29.201.1:9090/lldp/neighbors: Get "http://172.29.201.1:9090/lldp/neighbors": dial tcp 172.29.201.1:9090: i/o timeout
#+end_example
** Reduced default HTTP timeout to 2s
* TODO Add retries to HTTP GET?
* TODO Parallelize GET requests with goroutines
* TODO Handle "500 internal server error" if lldpcli can't be executed on the machine
#+begin_src shell :results output
curl -v localhost:9090/lldp/chassis 2>&1 | tr -d \\r
#+end_src

#+RESULTS:
#+begin_example
,*   Trying 127.0.0.1:9090...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* Connected to localhost (127.0.0.1) port 9090 (#0)
> GET /lldp/chassis HTTP/1.1
> Host: localhost:9090
> User-Agent: curl/7.83.1
> Accept: */*
>
,* Mark bundle as not supporting multiuse
< HTTP/1.1 500 Internal Server Error
< Date: Thu, 10 Nov 2022 20:27:49 GMT
< Content-Length: 0
<
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
,* Connection #0 to host localhost left intact
#+end_example
* DONE Handle lldpcli output where mgmt-ip is flattened instead of being of type array
This happens if only one mgmt-ip is reported rather than multiple.
Crazy inconsistency in lldpcli JSON output but I don't make the rules
#+begin_example
$ go run .
2022/11/22 01:31:52 topologyd.go:81: HTTP response for GET http://[fe80::6055:f4ff:fe3c:c3fc%25enp3s0]:9090/lldp/chassis: &{200 OK %!s(int=200) HTTP/1.1 %!s(int=1) %!s(int=1) map[Content-Length:[715] Content-Type:[application/json] Date:[Tue, 22 Nov 2022 00:26:38 GMT]] %!s(*http.bodyEOFSignal=&{0xc000196000 {0 0} false <nil> 0x635de0 0x635ee0}) %!s(int64=715) [] %!s(bool=false) %!s(bool=false) map[] %!s(*http.Request=&{GET 0xc0000de000 HTTP/1.1 1 1 map[] <nil> <nil> 0 [] false [fe80::6055:f4ff:fe3c:c3fc%enp3s0]:9090 map[] map[] <nil> map[]   <nil> <nil> <nil> 0xc000022108}) %!s(*tls.ConnectionState=<nil>)}
2022/11/22 01:31:52 topologyd.go:103: Body: {
  "local-chassis": {
    "chassis": {
      "dc3500": {
        "id": {
          "type": "mac",
          "value": "fe:51:ab:5a:60:62"
        },
        "descr": "DET Wayland dunfell-6.0-39-g7f433c3 (dunfell) Linux 5.4.24 #1 SMP PREEMPT Thu Oct 7 08:39:19 UTC 2021 aarch64",
        "mgmt-ip": "fe80::6055:f4ff:fe3c:c3fc",
        "capability": [
          {
            "type": "Bridge",
            "enabled": true
          },
          {
            "type": "Router",
            "enabled": false
          },
          {
            "type": "Wlan",
            "enabled": false
          },
          {
            "type": "Station",
            "enabled": false
          }
        ]
      }
    }
  }
}


2022/11/22 01:31:52 topologyd.go:81: HTTP response for GET http://[fe80::6055:f4ff:fe3c:c3fc%25enp3s0]:9090/lldp/neighbors: &{200 OK %!s(int=200) HTTP/1.1 %!s(int=1) %!s(int=1) map[Content-Length:[1679] Content-Type:[application/json] Date:[Tue, 22 Nov 2022 00:26:38 GMT]] %!s(*http.bodyEOFSignal=&{0xc000134080 {0 0} false <nil> 0x635de0 0x635ee0}) %!s(int64=1679) [] %!s(bool=false) %!s(bool=false) map[] %!s(*http.Request=&{GET 0xc00018a6c0 HTTP/1.1 1 1 map[] <nil> <nil> 0 [] false [fe80::6055:f4ff:fe3c:c3fc%enp3s0]:9090 map[] map[] <nil> map[]   <nil> <nil> <nil> 0xc000022108}) %!s(*tls.ConnectionState=<nil>)}
2022/11/22 01:31:52 topologyd.go:103: Body: {
  "lldp": {
    "interface": [
      {
        "en0": {
          "via": "LLDP",
          "rid": "1",
          "age": "0 day, 00:39:51",
          "chassis": {
            "id": {
              "type": "mac",
              "value": "9e:52:ec:13:ab:91"
            }
          },
          "port": {
            "id": {
              "type": "mac",
              "value": "00:07:8e:ff:ea:1d"
            },
            "descr": "en1",
            "ttl": "120"
          }
        }
      },
      {
        "en1": {
          "via": "LLDP",
          "rid": "2",
          "age": "0 day, 00:04:39",
          "chassis": {
            "dc3500": {
              "id": {
                "type": "mac",
                "value": "9e:52:ec:13:ab:92"
              },
              "descr": "DET Wayland dunfell-6.0-39-g7f433c3 (dunfell) Linux 5.4.24 #1 SMP PREEMPT Thu Oct 7 08:39:19 UTC 2021 aarch64",
              "mgmt-ip": "fe80::346a:32ff:fed4:be3a",
              "capability": [
                {
                  "type": "Bridge",
                  "enabled": true
                },
                {
                  "type": "Router",
                  "enabled": false
                },
                {
                  "type": "Wlan",
                  "enabled": false
                },
                {
                  "type": "Station",
                  "enabled": false
                }
              ]
            }
          },
          "port":
            "id": {
              "type": "mac",
              "value": "9e:52:ec:13:ab:92"
            },
            "descr": "en0",
            "ttl": "120"
          }
        }
      }
    ]
  }
}


2022/11/22 01:31:52 topologyd.go:139: Found machine 'id' which is seemingly not a dc3500: map[id:{{ }  [] []}]
panic: runtime error: index out of range [0] with length 0

goroutine 1 [running]:
main.get_mgmt_ip(0x0)
        /home/mw/src/topologyd/lldpcli-json.go:140 +0xbf
main.gather_neighbors_from_nodes()
        /home/mw/src/topologyd/topologyd.go:206 +0x5ac
main.main()
        /home/mw/src/topologyd/topologyd.go:306 +0x12e
exit status 2

#+end_example
* TODO Add testsuite
* TODO What about the case when no lldp neighbors are found?
Is the JSON output still parseable? -> No, but it does not raise an error.

#+begin_example
$ lldpcli -f json show neighbors
{
  "lldp": {

  }
}
#+end_example

Querying the topology in graphviz format for testing results in an empty graph.
This is incorrect since there should be at least one node present. However it
probably is not important, also is somewhat of a special case because there
would be no links between nodes, which are essential for graphviz output.

#+begin_example
$ curl localhost:9090/topology/graphviz
strict graph {
}
#+end_example

topologyd stdout/stderr on the topic (running lldpd only on the dev machine with
no dc3500 present in the network):

#+begin_example
$ go run . -netif enp3s0
2023/01/11 21:39:56 topologyd.go:216: == Begin gathering neighbors ==
2023/01/11 21:39:56 topologyd.go:44: Received HTTP GET from [::1]:55438 for /lldp/chassis
2023/01/11 21:39:56 topologyd.go:177: Found machine 'greifswald' which is seemingly not a dc3500: map[greifswald:{ID:{Type:mac Value:bc:ae:c5:47:5b:4b} Descr:NixOS 22.05 (Quokka) Linux 5.15.72 #1-NixOS SMP Wed Oct 5 08:39:44 UTC 2022 x86_64 MgmtIP:[192.168.1.5 fd52:e54d:2bb4::94c] Capability:[{Type:Bridge Enabled:false} {Type:Router Enabled:false} {Type:Wlan Enabled:true} {Type:Station Enabled:false}]}]
2023/01/11 21:39:56 topologyd.go:216: Processing #1 (host 192.168.1.5), todo list: []
2023/01/11 21:39:56 topologyd.go:44: Received HTTP GET from 192.168.1.5:42080 for /lldp/neighbors
2023/01/11 21:39:56 topologyd.go:157: cannot unmarshal json object of unknown format: {}
2023/01/11 21:39:56 topologyd.go:238: GET neighbors from '192.168.1.5': error: cannot unmarshal json object of unknown format: {}. Skipping.
2023/01/11 21:39:56 topologyd.go:216: == End gathering neighbors ==
#+end_example

* TODO Sort graphviz output
Otherwise it jumps around depending on which nodes are listed first
* TODO MgmtIP sometimes empty when a new host appears? workaround required
#+begin_example
Jan 30 12:21:47 dc3500 topologyd[480]: 2023/01/30 12:21:47 lldpcli-json.go:148: MgmtIP[]: No IP address found for chassis {ID:{Type:mac Value:b6:fe:ef:00:00:22} Descr:DET Wayland dunfell-7.0 -27-g4846420 (dunfell) Linux 5.4.24 #1 SMP PREEMPT Thu Oct 7 08:39:19 UTC 2021 aarch64 MgmtIP:[] Capability:[{Type:Bridge Enabled:true} {Type:Router Enabled:false} {Type:Wlan Enabled:false} {Type:Station Enabled:false}]} (all empty?)
Jan 30 12:21:49 dc3500 topologyd[480]: 2023/01/30 12:21:49 topologyd.go:261: == Begin gathering neighbors ==
#+end_example
